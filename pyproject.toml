[project]
name = "nldi-py"
version = "2.1.2"
description = "The Hydro Network Linked Data Index (NLDI) puts a restful application programming interface (API) in front of the National Hydrolography dataset (NHD). Now, instead of needing to be a GIS professional, any web developer can build tools against the core data in the NHD in a scalable, workable way."
authors = [{ name = "Internet of Water" }]
requires-python = ">=3.11,<4.0"
readme = "README.md"
license = "CC0-1.0" #  https://spdx.org/licenses/CC0-1.0.html
maintainers = [
  { name = "Benjamin Webb", email = "bwebb@lincolninst.edu" },
  { name = "Gene Trantham", email = "gtrantham@usgs.gov" },
]
keywords = ["usgs", "nldi", "nhgf", "nhd"]
classifiers = [
  "Development Status :: 4 - Beta",
  "Framework :: Flask",
  "Intended Audience :: Developers",
  "Intended Audience :: Science/Research",
  "License :: CC0 1.0 Universal (CC0 1.0) Public Domain Dedication",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Topic :: Scientific/Engineering :: Atmospheric Science",
  "Topic :: Scientific/Engineering :: GIS",
  "Topic :: Scientific/Engineering :: Information Analysis",
]
dependencies = [
  "advanced-alchemy[uuid]>=1.0.0,<2",
  "geoalchemy2[shapely]>=0.16.0,<0.17",
  "uvicorn>=0.34.0,<0.35",
  "geomet>=1.1.0,<2",
  "pygeofilter[backend-sqlalchemy]>=0.3.1,<0.4",
  "dotenv>=0.9.9,<0.10",
  "psycopg-binary>=3.2.6,<4",
  "pyyaml>=6.0.2,<7",
  "psycopg>=3.2.6,<4",
  "gunicorn>=23.0.0,<24",
  "flask[async]>=3.1.0,<4",
  "flask-cors>=5.0.1,<6",
  "hypercorn>=0.17.3,<0.18",
  "httpx>=0.28.1,<0.29",
  "msgspec>=0.19.0,<0.20",
  "rich>=14.0.0,<15",
]

[project.urls]
Homepage = "https://github.com/internetofwater/nldi-py"
Repository = "https://github.com/internetofwater/nldi-py"

[dependency-groups]
dev = [
  "ruff>=0.5.5,<0.6",
  "pytest>=8.1.1,<9",
  "pytest-cov>=5.0.0,<6",
  "pytest-order>=1.2.1,<2",
  "pytest-sugar>=1.0.0,<2",
  "coverage[toml]>=6.5.0,<7",
  "mypy>=1.9.0,<2",
  "testcontainers>=4.7.2,<5",
  "ipykernel>=6.29.4,<7",
]

[tool.hatch.build.targets.sdist]
include = ["src/nldi"]

[tool.hatch.build.targets.wheel]
include = ["src/nldi"]

[tool.hatch.build.targets.wheel.sources]
"src/nldi" = "nldi"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.ruff]
fix = true
line-length = 120

[tool.ruff.format]
quote-style = "double"

[tool.ruff.lint]
select = ["N", "I", "E", "W", "S"]
extend-safe-fixes = ["D200"]
pydocstyle = { convention = "pep257" }
ignore = [
  "S311",
  "E501", # line too long
  "D211", # no blank line before section
  "D212", # no blank line after section
  "D400", # first line should end with a period
  "D401",
  "D105", # missing docstring in magic method
  "D103",
  "N999",
]

[tool.ruff.lint.per-file-ignores]
# tests can do some things that are not desirable in production code
"tests/*" = [
  "S101", # allowed to use asserts
]

[tool.pytest.ini_options]
log_cli = true
log_cli_level = "INFO"
addopts = "--tb=short -p no:warnings"
markers = [
  "order: sets the order of the tests",
  "unittest: unit tests",
  "integration: requires connection to containerized database running in local docker.",
  "system: requires connection to cloud-hosted database.",
]

[tool.coverage.report]
show_missing = true

[tool.mypy]
strict = false
pretty = true
show_column_numbers = true
show_error_context = true
ignore_missing_imports = true

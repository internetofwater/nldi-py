[tool.poetry]
name = "nldi-py"
version = "2.0.6"
description = "The Hydro Network Linked Data Index (NLDI) puts a restful application programming interface (API) in front of the National Hydrolography dataset (NHD). Now, instead of needing to be a GIS professional, any web developer can build tools against the core data in the NHD in a scalable, workable way."
authors = ["Internet of Water"]
maintainers = ["Benjamin Webb <bwebb@lincolninst.edu>", "Gene Trantham <gtrantham@usgs.gov>"]
license = "CC0"                                                                                                                                                                                                                                                                                                           # See  https://spdx.org/licenses/
readme = "README.md"

homepage = "https://github.com/internetofwater/nldi-py"
repository = "https://github.com/internetofwater/nldi-py"
keywords = ['usgs', 'nldi', 'nhgf', 'nhd']

classifiers = [ # see https://pypi.org/classifiers/
  'Development Status :: 4 - Beta',
  'Environment :: Console',
  'Intended Audience :: Developers',
  'Intended Audience :: Science/Research',
  'License :: CC0 1.0 Universal (CC0 1.0) Public Domain Dedication',
  'Operating System :: OS Independent',
  'Programming Language :: Python',
  'Topic :: Scientific/Engineering :: Atmospheric Science',
  'Topic :: Scientific/Engineering :: GIS',
  'Topic :: Scientific/Engineering :: Information Analysis',
]

packages = [{ include = "nldi", from = "src" }]


[tool.poetry.dependencies]
python = "^3.11"
advanced-alchemy = { extras = ["uuid"], version = "^1.0.0" }
geoalchemy2 = { extras = ["shapely"], version = "^0.16.0" }
uvicorn = "^0.34.0"
geomet = "^1.1.0"
pygeofilter = { extras = ["backend-sqlalchemy"], version = "^0.3.1" }
dotenv = "^0.9.9"
psycopg-binary = "^3.2.6"
pyyaml = "^6.0.2"
psycopg = "^3.2.6"
gunicorn = "^23.0.0"
flask = "^3.1.0"
flask-cors = "^5.0.1"
hypercorn = "^0.17.3"
httpx = "^0.28.1"
msgspec = "^0.19.0"
rich = "^14.0.0"
asgiref = "^3.8.1"


[tool.poetry.group.dev.dependencies]
ruff = "^0.5.5"
pytest = "^8.1.1"
pytest-cov = "^5.0.0"
pytest-order = "^1.2.1"
pytest-sugar = "^1.0.0"
coverage = { extras = ["toml"], version = "^6.5.0" }
mypy = "^1.9.0"
testcontainers = "^4.7.2"
ipykernel = "^6.29.4"
ghp-import = "^2.1.0"
pynhd = "^0.19.3"


[tool.ruff]
fix = true
line-length = 120

[tool.ruff.format]
quote-style = "double"

[tool.ruff.lint]
select = ["N", "D", "I", "E", "W", "S"]
extend-safe-fixes = ["D200"]
pydocstyle = { convention = "pep257" }
ignore = [
  "S311",
  "E501", # line too long
  "D211", # no blank line before section
  "D212", # no blank line after section
  "D400", # first line should end with a period
  "D401",
  "D105", # missing docstring in magic method
  "D107", # missing docstring in __init__
  "N999",
]

[tool.ruff.lint.per-file-ignores]
# tests can do some things that are not desirable in production code
"tests/*" = [
  "S101", # allowed to use asserts
]

# [tool.pytest]


[tool.pytest.ini_options]
log_cli = true
log_cli_level = "INFO"
addopts = "--tb=short -p no:warnings"
markers = [
  "order: sets the order of the tests",
  "unittest: unit tests",
  "integration: integration tests which have out-of-process dependencies",
]


[tool.coverage.report]
show_missing = true

[tool.mypy]
strict = false
pretty = true
show_column_numbers = true
show_error_context = true
ignore_missing_imports = true


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

#!/usr/bin/env python
# coding: utf-8
# SPDX-License-Identifier: CC0
# SPDX-FileCopyrightText: 2024-present USGS
# See the full copyright notice in LICENSE.md
#
"""Settings and utilities for OpenAPI document generation."""

import pathlib

from .. import __version__
from ..config import get_config, load_yaml

_CFG = get_config()


def generate_openapi_json():
    """
    Generate an OpenAPI document for the API.

    This method will generate an OpenAPI JSON document based on the information
    found in the global configuration supplied in the constructor. The structure
    of the OAS document and the included endpoints match the current NLDI spec.
    Those paths are largely hard-coded in this method rather than being dynamically
    generated by the currently-loaded plugins. This is because plugins only load
    when they are needed, yet we still need to generate the OpenAPI document for
    services that are not yet loaded.

    Note that the OpenAPI document is generated as a dictionary, not as a JSON string
    (despite the name of the method suggesting json output). The dictionary must be
    serialized to JSON as a part of the Flask framework (using ``jsonify`` or similar).

    :return: OpenAPI document
    :rtype: Dict[str, Any]
    """
    # TODO: load the endpoint descriptions from docstrings -- perhaps one function in the API per endpoint?
    # This would require that we add methods here for each endpoint, which might be a good idea for other
    # reasons as well.  It would also give us consistent docstring format for the plugins.

    OAS_SCHEMAS = load_yaml(pathlib.Path(__file__).parent / "xtras" / "schemas.yaml")  # noqa: N806
    OAS_PARAMETERS = load_yaml(pathlib.Path(__file__).parent / "xtras" / "parameters.yaml")  # noqa: N806
    OAS_RESPONSES = load_yaml(pathlib.Path(__file__).parent / "xtras" / "responses.yaml")  # noqa: N806
    global _CFG

    RESPONSES = {  # noqa: N806
        "400": {"$ref": "#/components/responses/400"},
        "404": {"$ref": "#/components/responses/404"},
        "406": {"$ref": "#/components/responses/406"},
        "500": {"$ref": "#/components/responses/500"},
    }

    oas = {
        "openapi": "3.0.1",
        "info": {
            "title": _CFG.metadata.title,
            "description": _CFG.metadata.description,
            "x-keywords": ["linked data", "hydrology", "geospatial"],
            "termsOfService": _CFG.metadata.terms_of_service,
            "contact": {
                "name": _CFG.metadata.provider["name"],
                "url": _CFG.metadata.provider["url"],
            },
            "license": _CFG.metadata.license,
            "version": __version__,
        },
        "servers": [
            {"url": _CFG.server.base_url, "description": _CFG.metadata.title},
        ],
        "components": {
            "schemas": OAS_SCHEMAS,
            "responses": OAS_RESPONSES,
            "parameters": OAS_PARAMETERS,
        },
        "tags": [
            {
                "description": "NLDI home",
                "externalDocs": {
                    "description": "information",
                    "url": "https://github.com/internetofwater/nldi-services",
                },
                "name": "nldi",
            },
            {
                "description": "NHDPlus Version 2 COMID",
                "externalDocs": {
                    "description": "information",
                    "url": "https://www.usgs.gov/national-hydrography/national-hydrography-dataset",  # noqa
                },
                "name": "comid",
            },
        ],
    }
    paths = dict()

    tags = [
        {
            "description": "NLDI home",
            "externalDocs": {
                "description": "information",
                "url": "https://github.com/internetofwater/nldi-services",
            },
            "name": "nldi",
        },
        {
            "description": "NHDPlus Version 2 COMID",
            "externalDocs": {
                "description": "information",
                "url": "https://www.usgs.gov/national-hydrography/national-hydrography-dataset",  # noqa
            },
            "name": "by_comid",
        },
        {
            "description": "Lookups by source ID",
            "name": "by_sourceid",
        },
    ]

    paths["/"] = {
        "get": {
            "summary": "getLandingPage",
            "description": "Landing page",
            "tags": ["nldi"],
            "operationId": "getLandingPage",
            "responses": {
                "200": {"description": "OK"},
                "400": {"$ref": "#/components/responses/400"},
                "500": {"$ref": "#/components/responses/500"},
            },
        }
    }
    paths["/openapi"] = {
        "get": {
            "summary": "getOpenAPI",
            "description": "This document",
            "tags": ["nldi"],
            "operationId": "getOpenAPI",
            "responses": {
                "200": {"description": "OK"},
                "400": {"$ref": "#/components/responses/400"},
                "500": {"$ref": "#/components/responses/500"},
            },
        }
    }
    paths["/linked-data"] = {
        "get": {
            "summary": "getDataSources",
            "description": "Returns a list of data sources",
            "tags": ["nldi"],
            "operationId": "getDataSources",
            "responses": {
                "200": {
                    "description": "OK",
                    "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DataSourceList"}}},
                },
                **RESPONSES,
            },
        }
    }
    paths["/linked-data/hydrolocation"] = {
        "get": {
            "summary": "getHydrologicLocation",
            "description": ("Returns the hydrologic location closest to a provided set of coordinates."),
            "tags": ["nldi"],
            "operationId": "getHydrologicLocation",
            "parameters": [{"$ref": "#/components/parameters/coords"}],
            "responses": {
                "200": {
                    "description": "OK",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FeatureCollection"  # noqa
                            }
                        }
                    },
                },
                **RESPONSES,
            },
        }
    }

    paths["/linked-data/comid/position"] = {
        "get": {
            "summary": "ComidByCoordinates",
            "description": ("returns the feature closest to a provided set of coordinates"),
            "tags": ["by_comid"],
            "operationId": "ComidByCoordinates",
            "parameters": [{"$ref": "#/components/parameters/coords"}],
            "responses": {
                "200": {
                    "description": "OK",
                    "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Feature"}}},
                },
                **RESPONSES,
            },
        }
    }

    paths["/linked-data/comid/{comid}"] = {
        "get": {
            "summary": f"ComidById",
            "description": ("returns registered feature as WGS84 lat/lon GeoJSON if it exists"),
            "tags": ["by_comid"],
            "operationId": f"ComidById",
            "parameters": [
                {"$ref": "#/components/parameters/comid"},
            ],
            "responses": {
                "200": {
                    "description": "OK",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FeatureCollection"  # noqa
                            }
                        },
                        "application/ld+json": {
                            "schema": {
                                "$ref": "#/components/schemas/FeatureCollection"  # noqa
                            }
                        },
                        "application/vnd.geo+json": {
                            "schema": {
                                "$ref": "#/components/schemas/FeatureCollection"  # noqa
                            }
                        },
                    },
                },
                **RESPONSES,
            },
        }
    }

    paths["/linked-data/{sourceid}/{identifier}"] = {
        "get": {
            "summary": "SourceFeatureById",
            "description": ("returns registered feature as WGS84 lat/lon GeoJSON if it exists"),
            "tags": ["by_sourceid"],
            "operationId": f"SourceFeatureById",
            "parameters": [
                {"$ref": "#/components/parameters/identifier"},
                {"$ref": "#/components/parameters/sourceid"},
            ],
            "responses": {
                "200": {
                    "description": "OK",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FeatureCollection"  # noqa
                            }
                        },
                        "application/ld+json": {
                            "schema": {
                                "$ref": "#/components/schemas/FeatureCollection"  # noqa
                            }
                        },
                        "application/vnd.geo+json": {
                            "schema": {
                                "$ref": "#/components/schemas/FeatureCollection"  # noqa
                            }
                        },
                    },
                },
                **RESPONSES,
            },
        }
    }

    for src in ["comid", "{sourceid}"]:
        base_path = f"/linked-data/{src}"
        src_name = "Source" if src == "{sourceid}" else "comid"
        id_field = "{comid}" if src == "comid" else "{identifier}"

        paths[f"{base_path}"] = {
            "get": {
                "description": """Returns a FeatureCollection of features from the named source.
                    \n\nThe response can be paginated.  You can specify a different number of
                    rows by setting the `limit` query parameter.  Specify an `offset` to request a specific
                    range of records.

                    \n\nIf `limit` and `offset` are unspecified, the entire feature set is returned.""",
                "tags": ["by_comid" if src == "comid" else "by_sourceid"],
                "operationId": f"{src_name}AllFeatures",
                "parameters": [{"$ref": "#/components/parameters/limit"}, {"$ref": "#/components/parameters/offset"}],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {"type": "object", "additionalProperties": {"type": "object"}}
                            }
                        },
                    },
                    **RESPONSES,
                },
            }
        }
        params = [
            {"$ref": "#/components/parameters/simplified"},
            {"$ref": "#/components/parameters/splitCatchment"},
            {"$ref": "#/components/parameters/identifier"}
            if src == "{sourceid}"
            else {"$ref": "#/components/parameters/comid"},
        ]
        if src == "{sourceid}":
            params.append({"$ref": "#/components/parameters/sourceid"})

        paths[f"{base_path}/{id_field}/basin"] = {
            "get": {
                "summary": f"{src_name}Basin",
                "description": ("returns the aggregated basin for the specified feature in WGS84 lat/lon GeoJSON"),
                "tags": ["by_comid" if src == "comid" else "by_sourceid"],
                "operationId": f"{src_name}Basin",
                "parameters": params,
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FeatureCollection"  # noqa
                                }
                            },
                            "application/vnd.geo+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FeatureCollection"  # noqa
                                }
                            },
                        },
                    },
                    **RESPONSES,
                },
            }
        }

        paths[f"{base_path}/{id_field}/navigation"] = {
            "get": {
                "summary": f"{src_name}NavigationOptions",
                "description": "returns valid navigation end points",
                "tags": ["by_comid" if src == "comid" else "by_sourceid"],
                "operationId": f"{src_name}NavigationOptions",
                "parameters": [
                    {"$ref": "#/components/parameters/identifier"}
                    if src == "{sourceid}"
                    else {"$ref": "#/components/parameters/comid"},
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {"type": "object", "additionalProperties": {"type": "object"}}
                            }
                        },
                    },
                    **RESPONSES,
                },
            }
        }

        paths[f"{base_path}/{id_field}/navigation/{{navigationMode}}"] = {
            "get": {
                "summary": f"{src_name}Navigation",
                "description": "returns the navigation",
                "tags": ["by_comid" if src == "comid" else "by_sourceid"],
                "operationId": f"{src_name}Navigation",
                "parameters": [
                    {"$ref": "#/components/parameters/identifier"}
                    if src == "{sourceid}"
                    else {"$ref": "#/components/parameters/comid"},
                    {"$ref": "#/components/parameters/navigationMode"},
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DataSourceList"  # noqa
                                }
                            }
                        },
                    },
                    **RESPONSES,
                },
            }
        }

        paths[f"{base_path}/{id_field}/navigation/{{navigationMode}}/{{dataSource}}"] = {
            "get": {
                "summary": f"{src_name}NavigationDataSource",
                "description": (
                    "returns all features found along the specified navigation as points in WGS84 lat/lon GeoJSON"
                ),
                "tags": ["by_comid" if src == "comid" else "by_sourceid"],
                "operationId": f"{src_name}NavigationDataSource",
                "parameters": [
                    {"$ref": "#/components/parameters/identifier"}
                    if src == "{sourceid}"
                    else {"$ref": "#/components/parameters/comid"},
                    {"$ref": "#/components/parameters/navigationMode"},
                    {
                        "name": "dataSource",
                        "in": "path",
                        "required": True,
                        "schema": {"type": "string", "example": "nwissite"},
                        # "schema": {"type": "string", "example": "nwissite", "enum": source_names_enumerated},
                    },
                    {"$ref": "#/components/parameters/distance"},
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FeatureCollection"  # noqa
                                }
                            },
                            "application/vnd.geo+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FeatureCollection"  # noqa
                                }
                            },
                            "application/ld+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FeatureCollection"  # noqa
                                }
                            },
                        },
                    },
                    **RESPONSES,
                },
            }
        }

        params = [
            {"$ref": "#/components/parameters/identifier"}
            if src == "{sourceid}"
            else {"$ref": "#/components/parameters/comid"},
            {"$ref": "#/components/parameters/navigationMode"},
        ]
        if src == "comid":
            params.extend(
                [
                    {"$ref": "#/components/parameters/trimStart"},
                    {"$ref": "#/components/parameters/trimTolerance"},
                ]
            )

        paths[f"{base_path}/{id_field}/navigation/{{navigationMode}}/flowlines"] = {
            "get": {
                "summary": f"{src_name}NavigationFlowlines",
                "description": ("returns the flowlines for the specified navigation in WGS84 lat/lon GeoJSON"),
                "tags": ["by_comid" if src == "comid" else "by_sourceid"],
                "operationId": f"{src_name}NavigationFlowlines",
                "parameters": params,
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FeatureCollection"  # noqa
                                }
                            },
                            "application/vnd.geo+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FeatureCollection"  # noqa
                                }
                            },
                            "application/ld+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FeatureCollection"  # noqa
                                }
                            },
                        },
                    },
                    **RESPONSES,
                },
            }
        }

    oas["paths"] = paths
    oas["tags"] = tags
    return oas
